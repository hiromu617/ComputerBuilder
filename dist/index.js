/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./ts/constants.ts":
/*!*************************!*\
  !*** ./ts/constants.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.constants = void 0;\nexports.constants = {\n    BASE_URL: 'https://api.recursionist.io/builder/computers',\n    CPU_BRAND_SELECT: 'cpu-brand-select',\n    CPU_MODEL_SELECT: 'cpu-model-select',\n    GPU_BRAND_SELECT: 'gpu-brand-select',\n    GPU_MODEL_SELECT: 'gpu-model-select',\n    NUM_RAM_SELECT: 'num-ram-select',\n    RAM_BRAND_SELECT: 'ram-brand-select',\n    RAM_MODEL_SELECT: 'ram-model-select',\n    HDD_SSD_SELECT: 'hdd-ssd-select',\n    STORAGE_SELECT: 'storage-select',\n    STORAGE_MODEL_SELECT: 'storage-model-select',\n    STORAGE_BRAND_SELECT: 'storage-brand-select',\n    ADD_PC_BTN: 'add-pc-button',\n    PC_CONTAINER: 'pc-container',\n    slectedPartsMap: new Map(null),\n};\n\n\n//# sourceURL=webpack://computerbuilder/./ts/constants.ts?");

/***/ }),

/***/ "./ts/index.ts":
/*!*********************!*\
  !*** ./ts/index.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./ts/constants.ts\");\nvar init = function () {\n    fetchDataAndAfterProcess('CPU');\n    fetchDataAndAfterProcess('GPU');\n    fetchDataAndAfterProcess('RAM');\n    var HDDSSDSelect = document.getElementById(constants_1.constants.HDD_SSD_SELECT);\n    HDDSSDSelect === null || HDDSSDSelect === void 0 ? void 0 : HDDSSDSelect.addEventListener('change', function () {\n        if (HDDSSDSelect.value !== 'SSD' && HDDSSDSelect.value !== 'HDD')\n            return;\n        fetchDataAndAfterProcess(HDDSSDSelect.value);\n    });\n    var AddPcBtton = document.getElementById(constants_1.constants.ADD_PC_BTN);\n    AddPcBtton === null || AddPcBtton === void 0 ? void 0 : AddPcBtton.addEventListener('click', function () {\n        console.log(constants_1.constants.slectedPartsMap);\n        if (constants_1.constants.slectedPartsMap.size < 4) {\n            alert('全て選択してください');\n        }\n        renderPC(constants_1.constants.slectedPartsMap);\n    });\n};\nvar fetchDataAndAfterProcess = function (type) {\n    console.log('fetch', type);\n    fetch(constants_1.constants.BASE_URL + (\"?type=\" + type.toLowerCase()))\n        .then(function (res) { return res.json(); })\n        .then(function (data) {\n        if (type === 'CPU') {\n            var _a = generateSetAndMap(data), BrandSet = _a.BrandSet, BrandModelMap_1 = _a.BrandModelMap;\n            var BrandSelect_1 = document.getElementById(constants_1.constants.CPU_BRAND_SELECT);\n            var ModelSelect_1 = document.getElementById(constants_1.constants.CPU_MODEL_SELECT);\n            setOption(Array.from(BrandSet), constants_1.constants.CPU_BRAND_SELECT);\n            BrandSelect_1 === null || BrandSelect_1 === void 0 ? void 0 : BrandSelect_1.addEventListener('change', function () {\n                setOption(BrandModelMap_1.get(BrandSelect_1.value), constants_1.constants.CPU_MODEL_SELECT);\n            });\n            // 選んだModelをMapにセットする\n            ModelSelect_1 === null || ModelSelect_1 === void 0 ? void 0 : ModelSelect_1.addEventListener('change', function () {\n                if (ModelSelect_1.value === '-') {\n                    constants_1.constants.slectedPartsMap.delete(type);\n                    return;\n                }\n                var selectedModel = data.find(function (PCParts) { return PCParts.Model === ModelSelect_1.value; });\n                if (!selectedModel)\n                    return;\n                constants_1.constants.slectedPartsMap.set(type, selectedModel);\n            });\n        }\n        else if (type === 'GPU') {\n            var _b = generateSetAndMap(data), BrandSet = _b.BrandSet, BrandModelMap_2 = _b.BrandModelMap;\n            var BrandSelect_2 = document.getElementById(constants_1.constants.GPU_BRAND_SELECT);\n            var ModelSelect_2 = document.getElementById(constants_1.constants.GPU_MODEL_SELECT);\n            setOption(Array.from(BrandSet), constants_1.constants.GPU_BRAND_SELECT);\n            BrandSelect_2 === null || BrandSelect_2 === void 0 ? void 0 : BrandSelect_2.addEventListener('change', function () {\n                setOption(BrandModelMap_2.get(BrandSelect_2.value), constants_1.constants.GPU_MODEL_SELECT);\n            });\n            // 選んだModelをMapにセットする\n            ModelSelect_2 === null || ModelSelect_2 === void 0 ? void 0 : ModelSelect_2.addEventListener('change', function () {\n                if (ModelSelect_2.value === '-') {\n                    constants_1.constants.slectedPartsMap.delete(type);\n                    return;\n                }\n                var selectedModel = data.find(function (PCParts) { return PCParts.Model === ModelSelect_2.value; });\n                if (!selectedModel)\n                    return;\n                constants_1.constants.slectedPartsMap.set(type, selectedModel);\n            });\n        }\n        else if (type === 'RAM') {\n            var _c = generateSetAndMap(data), BrandSet = _c.BrandSet, BrandModelMap_3 = _c.BrandModelMap;\n            var BrandSelect_3 = document.getElementById(constants_1.constants.RAM_BRAND_SELECT);\n            var ModelSelect_3 = document.getElementById(constants_1.constants.RAM_MODEL_SELECT);\n            var NumRamSelect_1 = document.getElementById(constants_1.constants.NUM_RAM_SELECT);\n            setOption(Array.from(BrandSet), constants_1.constants.RAM_BRAND_SELECT);\n            BrandSelect_3 === null || BrandSelect_3 === void 0 ? void 0 : BrandSelect_3.addEventListener('change', function () {\n                if (NumRamSelect_1.value === '-' || BrandSelect_3.value === '-')\n                    return;\n                var filteredRamModels = filterRamModels(BrandModelMap_3.get(BrandSelect_3.value), +NumRamSelect_1.value);\n                setOption(filteredRamModels, constants_1.constants.RAM_MODEL_SELECT);\n            });\n            NumRamSelect_1 === null || NumRamSelect_1 === void 0 ? void 0 : NumRamSelect_1.addEventListener('change', function () {\n                if (NumRamSelect_1.value === '-' || BrandSelect_3.value === '-')\n                    return;\n                var filteredRamModels = filterRamModels(BrandModelMap_3.get(BrandSelect_3.value), +NumRamSelect_1.value);\n                setOption(filteredRamModels, constants_1.constants.RAM_MODEL_SELECT);\n            });\n            // 選んだModelをMapにセットする\n            ModelSelect_3 === null || ModelSelect_3 === void 0 ? void 0 : ModelSelect_3.addEventListener('change', function () {\n                if (ModelSelect_3.value === '-') {\n                    constants_1.constants.slectedPartsMap.delete(type);\n                    return;\n                }\n                var selectedModel = data.find(function (PCParts) { return PCParts.Model === ModelSelect_3.value; });\n                if (!selectedModel)\n                    return;\n                constants_1.constants.slectedPartsMap.set(type, selectedModel);\n            });\n        }\n        else if (type === 'HDD' || type === 'SSD') {\n            var _d = generateSetAndMap(data), BrandSet = _d.BrandSet, BrandModelMap_4 = _d.BrandModelMap;\n            var BrandSelect_4 = document.getElementById(constants_1.constants.STORAGE_BRAND_SELECT);\n            var ModelSelect_4 = document.getElementById(constants_1.constants.STORAGE_MODEL_SELECT);\n            var StorageSelect_1 = document.getElementById(constants_1.constants.STORAGE_SELECT);\n            var StorageSet = generateStorageSet(data);\n            setOption(Array.from(StorageSet), constants_1.constants.STORAGE_SELECT);\n            setOption(Array.from(BrandSet), constants_1.constants.STORAGE_BRAND_SELECT);\n            BrandSelect_4 === null || BrandSelect_4 === void 0 ? void 0 : BrandSelect_4.addEventListener('change', function () {\n                if (StorageSelect_1.value === '-' || BrandSelect_4.value === '-')\n                    return;\n                var filteredStorageModels = filterStorageModels(BrandModelMap_4.get(BrandSelect_4.value), StorageSelect_1.value);\n                setOption(filteredStorageModels, constants_1.constants.STORAGE_MODEL_SELECT);\n            });\n            StorageSelect_1 === null || StorageSelect_1 === void 0 ? void 0 : StorageSelect_1.addEventListener('change', function () {\n                if (StorageSelect_1.value === '-' || BrandSelect_4.value === '-')\n                    return;\n                var filteredStorageModels = filterStorageModels(BrandModelMap_4.get(BrandSelect_4.value), StorageSelect_1.value);\n                setOption(filteredStorageModels, constants_1.constants.STORAGE_MODEL_SELECT);\n            });\n            // 選んだModelをMapにセットする\n            ModelSelect_4 === null || ModelSelect_4 === void 0 ? void 0 : ModelSelect_4.addEventListener('change', function () {\n                if (ModelSelect_4.value === '-') {\n                    constants_1.constants.slectedPartsMap.delete(type);\n                    return;\n                }\n                var selectedModel = data.find(function (PCParts) { return PCParts.Model === ModelSelect_4.value; });\n                if (!selectedModel)\n                    return;\n                constants_1.constants.slectedPartsMap.delete('HDD');\n                constants_1.constants.slectedPartsMap.delete('SSD');\n                constants_1.constants.slectedPartsMap.set(type, selectedModel);\n            });\n        }\n    });\n};\ninit();\n// optionタグをarrayから生成,targetのHTMLに入れる\nvar setOption = function (array, target) {\n    var select = document.getElementById(target);\n    if (!select)\n        return;\n    var html = \"<option>-</option>\";\n    array.map(function (v) { return (html += \"<option>\" + v + \"</option>\"); });\n    select.innerHTML = html;\n};\n// 正規表現でRAMの本数を取り出し、絞り込む\nvar filterRamModels = function (models, num) {\n    return models.filter(function (model) {\n        var amount = model.match(/\\dx/g);\n        if (!amount)\n            return;\n        return +amount.toString().substring(0, 1) === num;\n    });\n};\n// 正規表現でStorageを取り出し、絞り込む\nvar filterStorageModels = function (models, storage) {\n    return models.filter(function (model) {\n        var storageVal = model.match(/\\d*[TG]B/g);\n        if (!storageVal)\n            return;\n        return storageVal.toString() === storage;\n    });\n};\n// PCParts[]からBrandのsetとBrandをkey、Modelをvalueのmapを返す\nvar generateSetAndMap = function (data) {\n    var BrandSet = new Set(data.map(function (v) { return v.Brand; }));\n    var BrandModelMap = new Map();\n    BrandSet.forEach(function (brand) {\n        var models = data.filter(function (v) { return v.Brand === brand; }).map(function (v) { return v.Model; });\n        BrandModelMap.set(brand, models);\n    });\n    return { BrandSet: BrandSet, BrandModelMap: BrandModelMap };\n};\n// PCPartsからStorageのsetを作成\nvar generateStorageSet = function (data) {\n    return new Set(data.map(function (v) {\n        var amount = v.Model.match(/\\d*[TG]B/g);\n        if (!amount)\n            return;\n        return amount.toString();\n    }));\n};\nvar renderPC = function (slectedPartsMap) {\n    var cpu = slectedPartsMap.get('CPU');\n    var gpu = slectedPartsMap.get('GPU');\n    var ram = slectedPartsMap.get('RAM');\n    var memory = slectedPartsMap.get('HDD') || slectedPartsMap.get('SSD');\n    var _a = getScore(slectedPartsMap), gamingScore = _a.gamingScore, workingScore = _a.workingScore;\n    var container = document.getElementById(constants_1.constants.PC_CONTAINER);\n    if (!container)\n        return;\n    container.innerHTML = \"\\n  <div class=\\\"container mx-auto\\\">\\n  <p class=\\\"mb-3 text-2xl text-gray-600 font-bold\\\"><span class=\\\"inline-block bg-purple-200 rounded-full px-4 py-1 text-xl font-semibold text-gray-700 mr-2\\\">SCORE</span>  Gaming \" + Math.round(gamingScore) + \"% Working \" + Math.round(workingScore) + \"%</p>\\n          <table class=\\\"w-full border-collapse\\\">\\n          <thead class=\\\"w-full\\\">\\n            <tr>\\n              <th class=\\\"py-4 px-6 text-center bg-gray-400 font-bold uppercase text-sm text-white border-b border-grey-light\\\">type</th>\\n              <th class=\\\"py-4 px-6 text-center bg-gray-400 font-bold uppercase text-sm text-white border-b border-grey-light\\\">Brand</th>\\n              <th class=\\\"py-4 px-6 text-center bg-gray-400 font-bold uppercase text-sm text-white border-b border-grey-light\\\">Model</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr class=\\\"hover:bg-grey-lighter\\\">\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (cpu === null || cpu === void 0 ? void 0 : cpu.Type) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (cpu === null || cpu === void 0 ? void 0 : cpu.Brand) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (cpu === null || cpu === void 0 ? void 0 : cpu.Model) + \"</td>\\n            </tr>\\n            <tr class=\\\"hover:bg-grey-lighter\\\">\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (gpu === null || gpu === void 0 ? void 0 : gpu.Type) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (gpu === null || gpu === void 0 ? void 0 : gpu.Brand) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (gpu === null || gpu === void 0 ? void 0 : gpu.Model) + \"</td>\\n            </tr>\\n            <tr class=\\\"hover:bg-grey-lighter\\\">\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (ram === null || ram === void 0 ? void 0 : ram.Type) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (ram === null || ram === void 0 ? void 0 : ram.Brand) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (ram === null || ram === void 0 ? void 0 : ram.Model) + \"</td>\\n            </tr>\\n            <tr class=\\\"hover:bg-grey-lighter\\\">\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (memory === null || memory === void 0 ? void 0 : memory.Type) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (memory === null || memory === void 0 ? void 0 : memory.Brand) + \"</td>\\n              <td class=\\\"py-4 px-6 text-center border-b border-grey-light\\\">\" + (memory === null || memory === void 0 ? void 0 : memory.Model) + \"</td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n  \";\n};\nvar getScore = function (slectedPartsMap) {\n    var cpu = slectedPartsMap.get('CPU');\n    var gpu = slectedPartsMap.get('GPU');\n    var ram = slectedPartsMap.get('RAM');\n    var memory = slectedPartsMap.get('HDD') || slectedPartsMap.get('SSD');\n    var gamingScore = 0;\n    var workingScore = 0;\n    if (!cpu || !gpu || !ram || !memory)\n        return { gamingScore: gamingScore, workingScore: workingScore };\n    gamingScore += +cpu.Benchmark * 0.25;\n    gamingScore += +gpu.Benchmark * 0.6;\n    gamingScore += +ram.Benchmark * 0.125;\n    gamingScore += +memory.Benchmark * 0.025;\n    workingScore += +cpu.Benchmark * 0.6;\n    workingScore += +gpu.Benchmark * 0.25;\n    workingScore += +ram.Benchmark * 0.1;\n    workingScore += +memory.Benchmark * 0.05;\n    return { gamingScore: gamingScore, workingScore: workingScore };\n};\n\n\n//# sourceURL=webpack://computerbuilder/./ts/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./ts/index.ts");
/******/ 	
/******/ })()
;